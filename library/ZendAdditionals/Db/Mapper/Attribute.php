<?php
namespace ZendAdditionals\Db\Mapper;

class Attribute extends AbstractCachedMapper
{
    const SERVICE_NAME = 'ZendAdditionals\Db\Mapper\Attribute';

    protected $tableName           = 'attribute';
    protected $autoGenerated       = 'id';
    protected $tablePrefixRequired = true;

    protected $cachedAttributeData = array();

    protected $primaries = array(
        array('id'),
    );

    /**
     * Initialize the allCachedAttributeData array
     *
     * @param string $tablePrefix
     *
     * @return void
     */
    protected function initializeCachedAttributes($tablePrefix)
    {
        if (
            is_array($this->cachedAttributeData) &&
            isset($this->cachedAttributeData[$tablePrefix])
        ) {
            return;
        }
        $lockingCache = $this->getServiceManager()->get('RtsCache\Default');
        /*@var $lockingCache \ZendAdditionals\Cache\Pattern\LockingCache*/

        $class = $this;

        $allAttributeIds = $lockingCache->get(
            __CLASS__ . ':::' . $tablePrefix,
            function() use ($tablePrefix) {
                return $this->getAllAttributeIds($tablePrefix);
            },
            25200
        );

        $this->setTableNameOverride($tablePrefix . $this->getTableName());
        $attributes = $this->fetchEntityCollectionByIds(
            $allAttributeIds
        );
        $this->setTableNameOverride(null);

        foreach ($attributes as $attribute) {
            $this->cachedAttributeData[$tablePrefix]['by_label'][$attribute->getLabel()] = $attribute;
            $this->cachedAttributeData[$tablePrefix]['by_id'][$attribute->getId()]       = $attribute;
        }
    }

    /**
     * Get all the attribute ids available
     *
     * @param string $tablePrefix
     *
     * @return array<integer>
     */
    protected function getAllAttributeIds($tablePrefix)
    {
        $select = $this->getSelect(
            $tablePrefix . $this->getTableName()
        );
        $select->columns(array('id'));

        $results = $this->getAll($select, false);

        $return = array();
        foreach ($results as $result) {
            $return[] = (int) $result['id'];
        }

        return $return;
    }

    /**
     * This method should only get called from initializeCachedAttributes
     *
     * @param string $tablePrefix
     *
     * @return array like
     * array(
     *     'by_label' => array<Attribute>,
     *     'by_id'    => array<Attribute>,
     * )
     */
    public function getAllAttributes($tablePrefix)
    {
        $this->initializeCachedAttributes($tablePrefix);
        return $this->cachedAttributeData[$tablePrefix];
    }

    /**
     * Get the attribute id for a given label
     *
     * @param string $label
     * @param string $tablePrefix
     *
     * @return integer
     *
     * @throws \UnexpectedValueException
     */
    public function getIdByLabel($label, $tablePrefix)
    {
        $this->initializeCachedAttributes($tablePrefix);
        if (!isset($this->cachedAttributeData[$tablePrefix]['by_label'][$label])) {
            throw new \UnexpectedValueException(
                'The expected attribute identified by label: ' . $label .
                ' does not exist!'
            );
        }
        return $this->cachedAttributeData[$tablePrefix]['by_label'][$label]->getId();
    }

    /**
     * Get teh attribute for a given label
     *
     * @param string $label
     * @param string $tablePrefix
     *
     * @return Attribute
     *
     * @throws \UnexpectedValueException
     */
    public function getAttributeByLabel($label, $tablePrefix)
    {
        $this->initializeCachedAttributes($tablePrefix);
        if (!isset($this->cachedAttributeData[$tablePrefix]['by_label'][$label])) {
            throw new \UnexpectedValueException(
                'The expected attribute identified by label: ' . $label .
                ' does not exist!'
            );
        }
        return $this->cachedAttributeData[$tablePrefix]['by_label'][$label];
    }

    /**
     * Get the attribute for a given id
     *
     * @param integer $id
     * @param string  $tablePrefix
     *
     * @return Attribute
     *
     * @throws \UnexpectedValueException
     */
    public function getAttributeById($id, $tablePrefix)
    {
        $this->initializeCachedAttributes($tablePrefix);
        if (!isset($this->cachedAttributeData[$tablePrefix]['by_id'][$id])) {
            throw new \UnexpectedValueException(
                'The expeted attribute identified by id: ' . $id .
                ' does not exist!'
            );
        }
        return $this->cachedAttributeData[$tablePrefix]['by_id'][$id];
    }

    /**
     * {@see parent::getAllowFilters()}
     */
    protected function getAllowFilters()
    {
        return true;
    }
}
