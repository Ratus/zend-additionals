<?php

namespace ZendAdditionals\Db\Mapper;

use ZendAdditionals\Db\Mapper\AbstractMapper;
use ZendAdditionals\Db\Entity\Attribute;

class AttributeMapper extends AbstractMapper
{
    /** @var string The name of the table */
    protected $tableName = 'attributes';

    /** @var string The auto_increment field of the table */
    protected $autoGenerated = 'id';

    /** @var array */
    protected $primaries = array(
        array('id'),
    );

    /** @var array */
    protected $uniques = array(
        array('label'),
    );

    /**
    * Get an attribute based on a given id
    *
    * @param string $tablePrefix    The tableprefix (eg profile)
    * @param string $attributeId    The attribute ID
    *
    * @return Attribute|FALSE
    */
    public function getAttributeById($tablePrefix, $attributeId)
    {
        return $this->getAttributeBy($tablePrefix, 'id', $attributeId);
    }

    /**
    * Get an attribute based on a given label
    *
    * @param string $tablePrefix    The tableprefix (eg profile)
    * @param string $label          The label you're looking for
    *
    * @return Attribute|FALSE
    */
    public function getAttributeByLabel($tablePrefix, $label)
    {
        return $this->getAttributeBy($tablePrefix, 'label', $label);
    }

    /**
    * Get an attribute id based on a given label
    *
    * @param string $tablePrefix    The tableprefix (eg profile)
    * @param string $label          The label you're looking for
    *
    * @return Attribute|FALSE
    */
    public function getAttributeIdByLabel($tablePrefix, $label)
    {
        $entity = $this->getAttributeByLabel($tablePrefix, $label);
        /** @var Attribute $entity */
        if ($entity === false) {
            return false;
        }

        return $entity->getId();
    }

    /**
    * General method for retrieving attribute
    *
    * @param string $tablePrefix    The tableprefix (eg profile)
    * @param string $field          The field you want to search on
    * @param string|int $value      The value of the field
    *
    * @return Attribute|FALSE
    */
    protected function getAttributeBy($tablePrefix, $field, $value)
    {
        $select = $this->getSelect()
            ->from($this->glueTableName($tablePrefix))
            ->where(array($field => $value));

        return $this->select($select)->current();
    }

    /**
    * Glue the prefix and the table together
    *
    * @param string $tablePrefix The prefix of the table (Eg profile)
    *
    * @return string The full tablename
    */
    protected function glueTableName($tablePrefix)
    {
        return $tablePrefix.'_'.$this->tableName;
    }
}

