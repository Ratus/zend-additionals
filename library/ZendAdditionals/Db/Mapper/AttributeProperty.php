<?php
namespace ZendAdditionals\Db\Mapper;

use ZendAdditionals\Db\Mapper\AbstractCachedMapper;
use ZendAdditionals\Db\Mapper\AbstractMapper;

class AttributeProperty extends AbstractCachedMapper
{
    const SERVICE_NAME = 'ZendAdditionals\Db\Mapper\AttributeProperty';

    protected $tableName           = 'attribute_property';
    protected $autoGenerated       = 'id';
    protected $tablePrefixRequired = true;

    protected $cachedAttributePropertyData = array();

    /**
     * Contains a list of extra identifiers tracked for this entity
     * NOTE: Changing this changes the cache keys
     * @var array
     */
    protected $entityCacheTrackedIdentifiers = array(
        'attribute_id'
    );

    protected $primaries = array(
        array('id'),
    );

    protected $relations = array(
        'attribute' => array(
            'mapper_service_name'    => Attribute::SERVICE_NAME,
            'required'               => true,
            'recursive_table_prefix' => true,
            'reference'              => array('attribute_id' => 'id'),
            'back_reference'         => array('id' => 'attribute_id'),
        ),
    );

    /**
     * Get all properties for a given attribute id
     *
     * @param integer $id
     * @param string  $tablePrefix
     *
     * @return array<AttributeProperty>
     */
    public function getPropertiesByAttributeId($id, $tablePrefix)
    {
        $this->setTableNameOverride($tablePrefix.$this->tableName);

        $result = $this->fetchEntityCollectionBy(
            'attribute_id',
            array($id)
        );

        $this->setTableNameOverride(null);

        return isset($result[$id]) ? $result[$id] : array();
    }

    /**
     * Get a list of property id's for a specific attribute id and one or more labels
     *
     * @param integer $id
     * @param array   $labels
     * @param string  $tablePrefix
     *
     * @return array<integer>
     */
    public function getPropertyIdsByAttributeIdAndLabels($id, array $labels, $tablePrefix)
    {
        $return = array();
        foreach ($labels as $label) {
            $return[] = $this->getPropertyIdByAttributeIdAndLabel($id, $label, $tablePrefix);
        }
        return empty($return) ? false : $return;
    }

    /**
     * Get an attribute property id for a given attribute id and label
     *
     * @param integer $id
     * @param string  $label
     * @param string  $tablePrefix
     *
     * @return integer|boolean false then no id has been found
     */
    public function getPropertyIdByAttributeIdAndLabel($id, $label, $tablePrefix)
    {
        $properties = $this->getPropertiesByAttributeId($id, $tablePrefix);

        foreach ($properties as $property) {
            if ($property->getLabel() === $label) {
                return $property->getId();
            }
        }

        return false;
    }

    /**
     * {@see parent::getAllowFilters()}
     */
    protected function getAllowFilters()
    {
        return true;
    }
}
