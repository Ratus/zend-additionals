<?php
namespace ZendAdditionals\Db\Mapper;

use ZendAdditionals\Db\Mapper\AbstractMapper;

class AttributeProperty extends AbstractMapper
{
    const SERVICE_NAME = 'ZendAdditionals\Db\Mapper\AttributeProperty';

    protected $tableName           = 'attribute_properties';
    protected $autoGenerated       = 'id';
    protected $tablePrefixRequired = true;

    protected $primaries = array(
        array('id'),
    );

    protected $relations = array(
        'attribute' => array(
            'mapper_service_name'    => Attribute::SERVICE_NAME,
            'required'               => true,
            'recursive_table_prefix' => true,
            'reference'              => array('attribute_id' => 'id'),
            'back_reference'         => array('id' => 'attribute_id'),
        ),
    );

    public function getPropertiesByAttributeId($id, $tablePrefix)
    {
        $select = $this->getSelect($tablePrefix.$this->tableName)
            ->where(array('attribute_id' => $id));

        $entities = array();

        $res = $this->getResult($select);

        foreach($res as $result) {
            $entities[] = $result;
        }

        return $entities;
    }


    public function getPropertyIdsByAttributeIdAndLabels($id, array $labels, $tablePrefix)
    {
        $return = array();
        foreach ($labels as $label) {
            $return[] = $this->getPropertyIdByAttributeIdAndLabel($id, $label, $tablePrefix);
        }
        return empty($return) ? false : $return;
    }


    public function getPropertyIdByAttributeIdAndLabel($id, $label, $tablePrefix)
    {
        $properties = $this->getPropertiesByAttributeId($id, $tablePrefix);

        foreach ($properties as $property) {
            if ($property->getLabel() === $label) {
                return $property->getId();
            }
        }

        return false;
    }

    protected function getAllowFilters()
    {
        return true;
    }
}

