<?php

namespace ZendAdditionals\Db\Mapper;

use ZendAdditionals\Db\Mapper\AbstractMapper;
use ZendAdditionals\Db\Entity\AttributeProperty;

class AttributePropertyMapper extends AbstractMapper
{
    /** @var string The name of the table */
    protected $tableName = 'attribute_properties';

    /** @var string The auto_increment field of the table */
    protected $autoGenerated = 'id';

    /** @var array */
    protected $primaries = array(
        array('id'),
    );

    /** @var array */
    protected $uniques = array(
        array('label'),
    );

    /**
    * Get an attribute based on a given id
    *
    * @param string $tablePrefix    The tableprefix (eg profile)
    * @param string $propertyId     The ID of the property
    *
    * @return Attribute|FALSE
    */
    public function getAttributePropertyById($tablePrefix, $propertyId)
    {
        return $this->getAttributePropertyBy($tablePrefix, 'id', $propertyId);
    }

    /**
    * Get an attributeProperty based on a given label
    *
    * @param string $tablePrefix    The tableprefix (eg profile)
    * @param string $attributeId    The attribute ID
    * @param string $label          The label you're looking for
    *
    * @return Attribute|FALSE
    */
    public function getAttributePropertyByLabel($tablePrefix, $attributeId, $label)
    {
        return $this->getAttributePropertyBy($tablePrefix, 'label', $label, $attributeId);
    }

    /**
    * Get an attribute id based on a given label
    *
    * @param string $tablePrefix    The tableprefix (eg profile)
    * @param string $attributeId    The attribute ID
    * @param string $label          The label you're looking for
    *
    * @return Attribute|FALSE
    */
    public function getAttributePropertyIdByLabel($tablePrefix, $attributeId, $label)
    {
        $entity = $this->getAttributePropertyByLabel($tablePrefix, $attributeId, $label);
        /** @var Attribute $entity */
        if ($entity === false) {
            return false;
        }

        return $entity->getId();
    }

    /**
    * Retrieve Attribute properties based on attribute id
    *
    * @param string $tablePrefix    The tableprefix (eg profile)
    * @param string $attributeId    The attribute ID
    *
    * @return AttributeProperty[]
    */
    public function getAttributePropertiesForAttributeId($tablePrefix, $attributeId)
    {
        $select = $this->getSelect()
            ->from($this->glueTableName($tablePrefix))
            ->where(array('attribute_id' => $attributeId));

        $return = array();
        foreach($this->select($select) as $entity) {
            /** @var AttributeProperty $entity */
            $return[$entity->getId()] = $entity;
        }

        return $return;
    }

    /**
    * General method for retrieving attribute
    *
    * @param string $tablePrefix    The tableprefix (eg profile)
    * @param string $field          The field you want to search on
    * @param string|int $value      The value of the field
    * @param string $attributeId    The attribute ID (Not used when NULL)
    *
    * @return Attribute|FALSE
    */
    protected function getAttributePropertyBy($tablePrefix, $field, $value, $attributeId = null)
    {
        $where = array($field => $value);
        if ($attributeId !== NULL) {
            $where['attribute_id'] = $attributeId;
        }

        $select = $this->getSelect()
            ->from($this->glueTableName($tablePrefix))
            ->where($where);

        return $this->select($select)->current();
    }

    /**
    * Glue the prefix and the table together
    *
    * @param string $tablePrefix The prefix of the table (Eg profile)
    *
    * @return string The full tablename
    */
    protected function glueTableName($tablePrefix)
    {
        return $tablePrefix.'_'.$this->tableName;
    }
}

